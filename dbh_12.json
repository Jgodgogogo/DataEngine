{"paragraphs":[{"text":"%spark.conf\n\nspark.jars hdfs:///tmp/junyi/impalajdbc41-2.6.4.jar\n","user":"admin","dateUpdated":"2021-01-19T15:27:42+0800","config":{"editorSetting":{"language":"text","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/text","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793989_656501442","id":"20210112-134514_819565976","dateCreated":"2021-01-19T15:19:53+0800","dateStarted":"2021-01-19T15:27:42+0800","dateFinished":"2021-01-19T15:27:42+0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:5205"},{"text":"%pyspark\n\nfrom pyspark.sql import SparkSession, SQLContext\nspark = SparkSession.builder\\\n        .master('yarn')\\\n        .appName('dbh')\\\n        .config(\"spark.jars\", \"/tmp/junyi/impalajdbc41-2.6.4.jar\")\\\n        .getOrCreate()\n        ","user":"admin","dateUpdated":"2021-01-19T15:27:42+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793989_440478424","id":"20201111-120655_909283917","dateCreated":"2021-01-19T15:19:53+0800","dateStarted":"2021-01-19T15:27:42+0800","dateFinished":"2021-01-19T15:28:04+0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5206"},{"text":"%pyspark\n\n# 选择朗逸纯电车型\nsql_mos = \"(select vin from mos.sa_mos_gvs_mysql_vehicle_tm_vehicle where model_id in (1561891753467858944,1561943411266703361,1615177859160764416)) as ods_mos\"\ndf_lavida_ev = spark.read\\\n                    .format(\"jdbc\")\\\n                    .option(\"url\", \"jdbc:impala://svlhdp014.csvw.com:25004/mos;AuthMech=3;UID=scb;PWD=scb\")\\\n                    .option(\"driver\", \"com.cloudera.impala.jdbc41.Driver\")\\\n                    .option(\"dbtable\", sql_mos)\\\n                    .load()\n\nprint sql_mos\nprint 'lavida_ev_count:', df_lavida_ev.count()\ndf_lavida_ev.show(5)\n","user":"admin","dateUpdated":"2021-01-19T15:28:04+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793990_298537138","id":"20210112-134132_1908095674","dateCreated":"2021-01-19T15:19:53+0800","dateStarted":"2021-01-19T15:28:04+0800","dateFinished":"2021-01-19T15:28:17+0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5207"},{"text":"%pyspark\n\n# 读取2020-12所有车辆vin码\nsql_vin = \"(select distinct(deviceid) from rtm.ods_rtm where (year(dt)=2020) and (month(dt) = 12)) as ods_rtm_vin\"\ndf_vin = spark.read\\\n        .format(\"jdbc\")\\\n        .option(\"url\", \"jdbc:impala://svlhdp014.csvw.com:25004/mos;AuthMech=3;UID=scb;PWD=scb\")\\\n        .option(\"driver\", \"com.cloudera.impala.jdbc41.Driver\")\\\n        .option(\"dbtable\", sql_vin)\\\n        .load()\n\nprint 'vin count in 2020-12: ', df_vin.count()\ndf_vin = df_vin.toPandas()\n","user":"admin","dateUpdated":"2021-01-19T15:28:17+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793990_1289792559","id":"20210115-135921_2084968971","dateCreated":"2021-01-19T15:19:53+0800","dateStarted":"2021-01-19T15:28:17+0800","dateFinished":"2021-01-19T15:28:39+0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5208"},{"text":"%pyspark\n\n# 筛选出朗逸纯电车型的vin码\ndf_lavida_ev = df_lavida_ev.toPandas()\nlavida_ev_list = df_lavida_ev['vin'].tolist()\ndf_vin_lavida = df_vin[df_vin['deviceid'].isin(lavida_ev_list)]\nvin_list = df_vin_lavida['deviceid'].tolist()\nprint 'lavida vin num in November:', len(vin_list)\nprint 'vin_list_5:', vin_list[:5]\n","user":"admin","dateUpdated":"2021-01-19T15:28:39+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793991_-1699331637","id":"20201111-120740_1392915044","dateCreated":"2021-01-19T15:19:53+0800","dateStarted":"2021-01-19T15:28:39+0800","dateFinished":"2021-01-19T15:28:39+0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5209"},{"text":"%pyspark\n\n# read rtm\ncols = ['uploadtime','deviceid','vehiclestatus','chargingstatus','operationmode','vehiclespeed','accmiles','soc','gp','accpedtrav','brakepedstat','emspeed','emtq','mxal','celohwn','lsocwn','lg','lat','gpsvalid', 'dt']\nsql_rtm = \"(select \"  + ','.join(cols) + \" from rtm.ods_rtm where (year(dt)=2020) and (month(dt) = 12)) as ods_rtm\"\nprint 'sql:', sql_rtm\n\ndf = spark.read\\\n    .format(\"jdbc\")\\\n    .option(\"url\", \"jdbc:impala://svlhdp014.csvw.com:25004/mos;AuthMech=3;UID=scb;PWD=scb\")\\\n    .option(\"driver\", \"com.cloudera.impala.jdbc41.Driver\")\\\n    .option(\"dbtable\", sql_rtm)\\\n    .load()\ndf.createOrReplaceTempView('table')\n","user":"admin","dateUpdated":"2021-01-19T15:28:39+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793991_29783247","id":"20201111-120739_1775499243","dateCreated":"2021-01-19T15:19:53+0800","dateStarted":"2021-01-19T15:28:39+0800","dateFinished":"2021-01-19T15:28:40+0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5210"},{"text":"%pyspark\n\n# 选择12月份所有Lavida数据\ndf = df[df.deviceid.isin(vin_list)]\nprint 'deviceid num:', df.select('deviceid').distinct().count()\nprint 'data count:', df.count()\n","user":"admin","dateUpdated":"2021-01-19T15:28:40+0800","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793991_-1019001669","id":"20210112-140033_253735156","dateCreated":"2021-01-19T15:19:53+0800","dateStarted":"2021-01-19T15:28:40+0800","dateFinished":"2021-01-19T15:30:10+0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5211"},{"text":"%pyspark\n\n# 样本数据查看\nprint 'groupBy operationmode:'\ndf.groupBy('operationmode').count().show()\nprint 'groupBy chargingstatus:'\ndf.groupBy('chargingstatus').count().show()\nprint 'groupBy vehiclestatus:'\ndf.groupBy('vehiclestatus').count().show()\n\n# 转换时间\nimport pyspark.sql.functions as f\nfrom pyspark.sql.types import *\ndf = df.withColumn('timestamp', df.uploadtime.cast(DoubleType())/1000.0)\ndf = df.withColumn('datetime', f.from_unixtime(df.timestamp, format=\"yyyy-MM-dd HH:mm:ss\"))\ndf = df.drop('uploadtime')\ndf = df.filter((f.year(df.dt)==f.year(df.datetime)) & (f.month(df.dt)==f.month(df.datetime)) & (f.dayofmonth(df.dt)==f.dayofmonth(df.datetime)))\nprint 'df count:', df.count()\ndf.show(5)\n\n","user":"admin","dateUpdated":"2021-01-19T15:30:10+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793992_-802998608","id":"20201111-142710_729063603","dateCreated":"2021-01-19T15:19:53+0800","dateStarted":"2021-01-19T15:30:10+0800","dateFinished":"2021-01-19T15:36:07+0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5212"},{"text":"%pyspark\n\n#-------------------------------车辆活动特征分析-------------------------------\n# 数据筛选-车辆状态\ndf_vehicle = df.filter((df.operationmode=='EV') & (df.chargingstatus=='NO_CHARGING') & (df.vehiclestatus=='STARTED'))\n# 去除非法gps，中国gps范围：经度（73.66, 135.05）， 纬度（3.86, 53.55）\ndf_vehicle = df_vehicle.filter((df_vehicle.lg.between(73.66, 135.05)) & df_vehicle.lat.between(3.86, 53.55))\nprint 'df_count:', df_vehicle.count()\ndf_vehicle.select('deviceid','operationmode','chargingstatus','vehiclestatus','vehiclespeed','accpedtrav','brakepedstat','lg','lat','gpsvalid','dt').show()\n\n# 数据筛选-报文数量大于1000的车辆\ndf_count = df_vehicle.groupBy('deviceid').count().orderBy('count')\ndf_count = df_count.filter(df_count['count']>=1000)\ndf_count.show(5)\nprint 'vin num selected:', df_count.count()\ndf_count = df_count.drop('count')\ndf_vehicle = df_vehicle.join(df_count, on='deviceid', how='inner')\nprint 'vin num verify:', df_vehicle.select('deviceid').distinct().count()\n\n","user":"admin","dateUpdated":"2021-01-19T15:36:07+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793992_1091014840","id":"20201111-121513_195336469","dateCreated":"2021-01-19T15:19:53+0800","dateStarted":"2021-01-19T15:36:07+0800","dateFinished":"2021-01-19T15:49:28+0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5213"},{"text":"%pyspark\n\n# 分区\ndf_vehicle = df_vehicle.repartitionByRange('deviceid')\nprint 'partition_num:', df_vehicle.rdd.getNumPartitions()\n\n# 分区内按时间排序\ndf_vehicle = df_vehicle.sortWithinPartitions('timestamp', ascending=True)\ndf_vehicle.select('deviceid','operationmode','chargingstatus','vehiclestatus', 'dt', 'timestamp', 'datetime', 'lg', 'lat').show(100)\n\n# 平移timestamp\nfrom pyspark.sql import Window\nw1 = Window.partitionBy('deviceid').orderBy('timestamp')\ndf_vehicle = df_vehicle.withColumn('timestamp_pre', f.lag('timestamp').over(w1))\ndf_vehicle = df_vehicle.withColumn('time_diff', df_vehicle.timestamp - df_vehicle.timestamp_pre)\ndf_vehicle = df_vehicle.withColumn('trip_status', f.when(df_vehicle.time_diff<300, 0).otherwise(1))\ndf_vehicle.select('deviceid', 'dt', 'timestamp', 'datetime', 'timestamp_pre', 'time_diff', 'trip_status', 'lg', 'lat').show(10)\n","user":"admin","dateUpdated":"2021-01-19T15:49:28+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793993_-2071460612","id":"20201111-120739_130415404","dateCreated":"2021-01-19T15:19:53+0800","dateStarted":"2021-01-19T15:49:28+0800","dateFinished":"2021-01-19T16:14:50+0800","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5214"},{"text":"%pyspark\n\n# 行程id\nw2 = Window.partitionBy('deviceid').orderBy('timestamp').rowsBetween(Window.unboundedPreceding, Window.currentRow)\ndf_vehicle = df_vehicle.withColumn('trip_id', f.sum('trip_status').over(w2))\ndf_vehicle.select('deviceid', 'dt', 'timestamp', 'datetime', 'timestamp_pre', 'time_diff', 'trip_status', 'trip_id', 'lg', 'lat').show(200)\n\n# 删除报文数据有间断的行程\nw3 = Window.partitionBy(['deviceid', 'trip_id'])\ndf_vehicle = df_vehicle.withColumn('greater_56', f.when(df_vehicle.time_diff>56, 1).otherwise(0))\ndf_vehicle = df_vehicle.withColumn('greater_56_times', f.sum('greater_56').over(w3))\ndf_vehicle.select('deviceid', 'dt', 'timestamp', 'datetime', 'timestamp_pre', 'time_diff', 'trip_status', 'trip_id', 'greater_56', 'greater_56_times', 'lg', 'lat').show()\ndf_vehicle = df_vehicle.filter(df_vehicle.greater_56_times<2)\nprint '删除报文间断行程后样本数量：', df_vehicle.count()\ndf_vehicle.select('deviceid', 'dt', 'timestamp', 'datetime', 'timestamp_pre', 'time_diff', 'trip_status', 'trip_id', 'greater_56', 'greater_56_times', 'lg', 'lat').show()\n","user":"admin","dateUpdated":"2021-01-19T16:14:50+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793993_-1246603285","id":"20201111-120739_1840804804","dateCreated":"2021-01-19T15:19:53+0800","dateStarted":"2021-01-19T16:14:50+0800","dateFinished":"2021-01-19T16:28:45+0800","status":"ABORT","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5215"},{"text":"%pyspark\n\n# 行程起始时间和终止时间\nw3 = Window.partitionBy(['deviceid', 'trip_id'])\ndf_vehicle = df_vehicle.withColumn('start_time', f.from_unixtime(f.min('timestamp').over(w3), format=\"yyyy-MM-dd HH:mm:ss\"))\\\n                        .withColumn('stop_time', f.from_unixtime(f.max('timestamp').over(w3), format=\"yyyy-MM-dd HH:mm:ss\"))\ndf_vehicle.select('deviceid', 'accmiles', 'dt', 'timestamp', 'datetime', 'timestamp_pre', 'time_diff', 'trip_status', 'trip_id', 'start_time', 'stop_time', 'lg', 'lat').show(50)\n\n# 行程时长（分钟）\ndf_vehicle = df_vehicle.withColumn('trip_duration', f.max('timestamp').over(w3) - f.min('timestamp').over(w3))\ndf_vehicle = df_vehicle.withColumn('trip_duration', df_vehicle.trip_duration/60)\n\n# 行程距离\ndf_vehicle = df_vehicle.withColumn('trip_distance', f.max(df_vehicle.accmiles.cast(DecimalType(6,1))).over(w3) - f.min(df_vehicle.accmiles.cast(DecimalType(6,1))).over(w3))\ndf_vehicle.select('deviceid', 'accmiles', 'dt', 'timestamp', 'datetime', 'timestamp_pre', 'time_diff', 'trip_status', 'trip_id', 'start_time', 'stop_time', 'trip_duration', 'trip_distance', 'lg', 'lat').show(50)\n\n","user":"admin","dateUpdated":"2021-01-19T15:19:53+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793994_1976369938","id":"20201111-120739_1275003553","dateCreated":"2021-01-19T15:19:53+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5216"},{"text":"%pyspark\n\n# 行程起始经纬度和终止经纬度\nfrom pyspark.sql.functions import PandasUDFType, pandas_udf\n@pandas_udf(\"deviceid string, trip_id int, lg string, start_lg string\", PandasUDFType.GROUPED_MAP)\ndef get_start_lg(df_x):\n    df_x = df_x.assign(start_lg = df_x['lg'].head(1).tolist()[0])\n    return df_x\ndf_start_lg = df_vehicle.select('deviceid', 'trip_id', 'lg').groupby(['deviceid', 'trip_id']).apply(get_start_lg)\ndf_start_lg = df_start_lg.drop('lg').distinct()\n\n@pandas_udf(\"deviceid string, trip_id int, lat string, start_lat string\", PandasUDFType.GROUPED_MAP)\ndef get_start_lat(df_x):\n    df_x = df_x.assign(start_lat = df_x['lat'].head(1).tolist()[0])\n    return df_x\ndf_start_lat = df_vehicle.select('deviceid', 'trip_id', 'lat').groupby(['deviceid', 'trip_id']).apply(get_start_lat)\ndf_start_lat = df_start_lat.drop('lat').distinct()\n\n@pandas_udf(\"deviceid string, trip_id int, lg string, stop_lg string\", PandasUDFType.GROUPED_MAP)\ndef get_stop_lg(df_x):\n    df_x = df_x.assign(stop_lg = df_x['lg'].tail(1).tolist()[0])\n    return df_x\ndf_stop_lg = df_vehicle.select('deviceid', 'trip_id', 'lg').groupby(['deviceid', 'trip_id']).apply(get_stop_lg)\ndf_stop_lg = df_stop_lg.drop('lg').distinct()\n\n@pandas_udf(\"deviceid string, trip_id int, lat string, stop_lat string\", PandasUDFType.GROUPED_MAP)\ndef get_stop_lat(df_x):\n    df_x = df_x.assign(stop_lat = df_x['lat'].tail(1).tolist()[0])\n    return df_x\ndf_stop_lat = df_vehicle.select('deviceid', 'trip_id', 'lat').groupby(['deviceid', 'trip_id']).apply(get_stop_lat)\ndf_stop_lat = df_stop_lat.drop('lat').distinct()\n\n# 组成起止gps\ndf_gps = df_start_lg.join(df_start_lat, on=['deviceid', 'trip_id'], how='inner')\ndf_gps = df_gps.join(df_stop_lg, on=['deviceid', 'trip_id'], how='inner')\ndf_gps = df_gps.join(df_stop_lat, on=['deviceid', 'trip_id'], how='inner')\ndf_gps.show()\n\n# 把gps加入到df_vehicle表中\ndf_vehicle = df_vehicle.join(df_gps, on=['deviceid', 'trip_id'], how='inner')\ndf_vehicle.select('deviceid', 'trip_id', 'timestamp', 'start_time', 'stop_time', 'trip_duration', 'lg', 'lat', 'start_lg', 'start_lat', 'stop_lg', 'stop_lat', 'trip_distance').show(100)\n\n","user":"admin","dateUpdated":"2021-01-19T15:19:53+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793995_-1192495820","id":"20201111-120739_457692211","dateCreated":"2021-01-19T15:19:53+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5217"},{"text":"%pyspark\n\n# 删除行程距离小于1km的行程\ndf_vehicle = df_vehicle.filter(df_vehicle.trip_distance>=1)\nprint '删除后，车辆数量：', df_vehicle.select('deviceid').distinct().count()\nprint '删除后，样本数量：', df_vehicle.count()\n\n# 写入hdfs\ndf_vehicle = df_vehicle.withColumn('lg', df_vehicle.lg.cast(DoubleType()))\\\n                       .withColumn('lat', df_vehicle.lat.cast(DoubleType()))\ndf_vehicle = df_vehicle.repartition(1)\ndf_vehicle.write.csv('/tmp/dbh_trip_basic', mode='overwrite', header=True)\n","user":"admin","dateUpdated":"2021-01-19T15:19:53+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793996_39789014","id":"20201111-120738_886604453","dateCreated":"2021-01-19T15:19:53+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5218"},{"text":"%pyspark\n\n# 行程表\ndf_trip = df_vehicle.select('deviceid', 'trip_id', 'start_time', 'stop_time', 'trip_duration', 'start_lg', 'start_lat', 'stop_lg', 'stop_lat', 'trip_distance').distinct()\nprint 'trip_num:', df_trip.count()\nprint 'trip datatypes:', df_trip.dtypes\ndf_trip.show()\n# 写入hdfs\ndf_trip = df_trip.repartition(1)\ndf_trip.write.csv('/tmp/dbh_trip_id', mode='overwrite', header=True)\n","user":"admin","dateUpdated":"2021-01-19T15:19:53+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793997_761414836","id":"20201111-120738_491710542","dateCreated":"2021-01-19T15:19:53+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5219"},{"text":"%pyspark\n\n# 车辆出行特征\ndf_vehicle_behavior = df_vehicle.select('deviceid', 'trip_id', 'start_time', 'stop_time',  'trip_distance', 'soc')\ndf_vehicle_behavior = df_vehicle_behavior.withColumn('soc', df_vehicle_behavior.soc.cast(IntegerType()))\\\n                                         .withColumn('start_hour', f.hour(df_vehicle_behavior.start_time.cast(TimestampType())))\nw4 = Window.partitionBy(['deviceid', 'trip_id'])\ndf_vehicle_behavior = df_vehicle_behavior.withColumn('start_soc', f.max('soc').over(w4))\\\n                                         .withColumn('stop_soc', f.min('soc').over(w4))\ndf_vehicle_behavior = df_vehicle_behavior.drop('soc').distinct()\nmunite = lambda x:x/60\ndf_vehicle_behavior = df_vehicle_behavior.withColumn('trip_duration', munite(f.unix_timestamp(timestamp='stop_time', format='yyyy-MM-dd HH:mm:ss')\\\n                                                                             - f.unix_timestamp(timestamp='start_time', format='yyyy-MM-dd HH:mm:ss')))\ndf_vehicle_behavior = df_vehicle_behavior.withColumn('trip_duration', df_vehicle_behavior.trip_duration.cast(DecimalType(7,1)))\ndf_vehicle_behavior = df_vehicle_behavior.withColumn('delta_soc', df_vehicle_behavior.start_soc - df_vehicle_behavior.stop_soc)\n\ndf_vehicle_behavior = df_vehicle_behavior.withColumn('distance_range', (df_vehicle_behavior.trip_distance / 10).cast(IntegerType()) * 10)\ndf_vehicle_behavior = df_vehicle_behavior.withColumn('soc_range', (df_vehicle_behavior.start_soc/10).cast(IntegerType())*10)\n\n# 写入hdfs\ndf_vehicle_behavior = df_vehicle_behavior.repartition(1)\ndf_vehicle_behavior.write.csv('/tmp/dbh_vehicle_behavior', mode='overwrite', header=True)\n","user":"admin","dateUpdated":"2021-01-19T15:19:53+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793997_604571257","id":"20201111-120738_1845702386","dateCreated":"2021-01-19T15:19:53+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5220"},{"text":"%pyspark\n\n# ----------------------------驾驶行为----------------------------\ndf_driving_behavior = df_vehicle.select('deviceid', 'trip_id', 'start_time', 'stop_time', 'trip_duration', 'trip_distance', 'soc', 'vehiclespeed', 'accpedtrav', 'brakepedstat', 'emspeed', 'emtq', 'mxal', 'celohwn', 'lsocwn', 'start_lg', 'start_lat', 'stop_lg', 'stop_lat')\n\n# 计算功率\ndf_driving_behavior = df_driving_behavior.withColumn('emspeed', df_driving_behavior.emspeed.cast(IntegerType()))\ndf_driving_behavior = df_driving_behavior.withColumn('emtq', df_driving_behavior.emtq.cast(IntegerType()))\ndf_driving_behavior = df_driving_behavior.withColumn('power', df_driving_behavior.emspeed * df_driving_behavior.emtq / 9500)\ndf_driving_behavior = df_driving_behavior.withColumn('power', df_driving_behavior.power.cast(DecimalType(7,2)))\n\n# 功率写入hdfs\ndf_power = df_driving_behavior.select('vehiclespeed', 'accpedtrav', 'brakepedstat', 'power')\n#df_power.write.csv('/tmp/dbh_vehicle_power', mode='overwrite', header=True)\n#df_power.show()\n\n# 删除功率相关字段\ndf_driving_behavior = df_driving_behavior.drop('emspeed', 'emtq', 'power')\n\ndf_driving_behavior.show()\n\n","user":"admin","dateUpdated":"2021-01-19T15:19:53+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793998_262990126","id":"20201111-120737_1487905713","dateCreated":"2021-01-19T15:19:53+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5221"},{"text":"%pyspark\n\n# 行程中停车次数\ndf_driving_behavior = df_driving_behavior.withColumn('speed', df_driving_behavior.vehiclespeed.cast(DecimalType(5,1)).cast(DoubleType()))\ndf_stop_times = df_driving_behavior.filter(df_driving_behavior.vehiclespeed==0.0).select('deviceid', 'trip_id')\ndf_stop_times = df_stop_times.groupby(['deviceid', 'trip_id']).count()\ndf_stop_times.show()\n\n# 匹配到驾驶行为中\ndf_driving_behavior = df_driving_behavior.join(df_stop_times, on=['deviceid', 'trip_id'], how='left')\ndf_driving_behavior = df_driving_behavior.withColumnRenamed('count', 'stop_times')\ndf_driving_behavior = df_driving_behavior.fillna({'stop_times':0})\ndf_driving_behavior.show(200)\n","user":"admin","dateUpdated":"2021-01-19T15:19:53+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793998_-155631831","id":"20210112-160317_347387228","dateCreated":"2021-01-19T15:19:53+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5222"},{"text":"%pyspark\n\n# 超速次数\ndf_driving_behavior = df_driving_behavior.withColumn('speeding', f.when(df_driving_behavior.speed>120, 1).otherwise(0))\ndf_driving_behavior = df_driving_behavior.withColumn('speeding_times', f.sum(df_driving_behavior.speeding).over(w4))\ndf_driving_behavior = df_driving_behavior.drop('speeding')\n\n# 平均速度、最大速度、速度标准差\ndf_driving_behavior = df_driving_behavior.replace(0.0, None, subset=['speed'])\ndf_driving_behavior = df_driving_behavior.withColumn('max_speed', f.max('speed').over(w4))\\\n                                         .withColumn('avg_speed', f.avg('speed').over(w4))\\\n                                         .withColumn('std_speed', f.stddev('speed').over(w4))\n\n# 急加速和急减速\ndf_driving_behavior = df_driving_behavior.withColumn('accpedtrav', df_driving_behavior.accpedtrav.cast(IntegerType()))\\\n                                         .withColumn('brakepedstat', df_driving_behavior.brakepedstat.cast(IntegerType()))\ndf_driving_behavior = df_driving_behavior.withColumn('is_rush', f.when(df_driving_behavior.accpedtrav>24, 1).otherwise(0))\\\n                                         .withColumn('is_nasty', f.when(df_driving_behavior.brakepedstat>19, 1).otherwise(0))\ndf_driving_behavior = df_driving_behavior.withColumn('rush_times', f.sum('is_rush').over(w4))\\\n                                         .withColumn('nasty_times', f.sum('is_nasty').over(w4))\n\n# 每百公里急加速和急减速次数\ndf_driving_behavior = df_driving_behavior.withColumn('rush_times_per100km', df_driving_behavior.rush_times / df_driving_behavior.trip_distance * 100)\\\n                                         .withColumn('nasty_times_per100km', df_driving_behavior.nasty_times / df_driving_behavior.trip_distance * 100)\ndf_driving_behavior = df_driving_behavior.withColumn('rush_times_per100km', df_driving_behavior.rush_times_per100km.cast(DecimalType(7,1)))\\\n                                         .withColumn('nasty_times_per100km', df_driving_behavior.nasty_times_per100km.cast(DecimalType(7,1)))\n# 耗电量\ndf_driving_behavior = df_driving_behavior.withColumn('soc', df_driving_behavior.soc.cast(IntegerType()))\ndf_driving_behavior = df_driving_behavior.withColumn('start_soc', f.max('soc').over(w4))\\\n                                         .withColumn('stop_soc', f.min('soc').over(w4))\ndf_driving_behavior = df_driving_behavior.withColumn('delta_soc', df_driving_behavior.start_soc - df_driving_behavior.stop_soc)\n\n# 每百公里耗电量\ndf_driving_behavior = df_driving_behavior.withColumn('delta_soc_per100km', df_driving_behavior.delta_soc / df_driving_behavior.trip_distance * 100)\ndf_driving_behavior = df_driving_behavior.withColumn('delta_soc_per100km', df_driving_behavior.delta_soc_per100km.cast(DecimalType(5,1)))\n\n# 最高报警等级次数\ndf_driving_behavior = df_driving_behavior.withColumn('mxal', df_driving_behavior.mxal.cast(IntegerType()))\ndf_driving_behavior = df_driving_behavior.withColumn('is_mxal', f.when(df_driving_behavior.mxal==3, 1).otherwise(0))\ndf_driving_behavior = df_driving_behavior.withColumn('mxal_times', f.sum('is_mxal').over(w4))\n\n# 电池高温报警次数\ndf_driving_behavior = df_driving_behavior.withColumn('celohwn', df_driving_behavior.celohwn.cast(BooleanType()).cast(IntegerType()))\ndf_driving_behavior = df_driving_behavior.withColumn('celohwn_times', f.sum('celohwn').over(w4))\n\n# soc低报警次数\ndf_driving_behavior = df_driving_behavior.withColumn('lsocwn', df_driving_behavior.lsocwn.cast(BooleanType()).cast(IntegerType()))\ndf_driving_behavior = df_driving_behavior.withColumn('lsocwn_times', f.sum('lsocwn').over(w4))\n\n# 去重\ndf_driving_behavior = df_driving_behavior.drop('soc', 'vehiclespeed', 'accpedtrav', 'brakepedstat', 'mxal', 'celohwn', 'lsocwn', 'speed', 'is_rush', 'is_nasty', 'is_mxal')\ndf_driving_behavior = df_driving_behavior.distinct()\nprint '行程数量：', df_driving_behavior.count()\n\n# 行程起始小时\ndf_driving_behavior = df_driving_behavior.withColumn('start_hour', f.hour(df_vehicle_behavior.start_time.cast(TimestampType())))\n\n# 写入hdfs\ndf_driving_behavior = df_driving_behavior.repartition(1)\ndf_driving_behavior.write.csv('/tmp/dbh_driving_behavior', mode='overwrite', header=True)\n\ndf_driving_behavior.show(200)\n","user":"admin","dateUpdated":"2021-01-19T15:19:53+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793998_-836420870","id":"20210112-163449_112779573","dateCreated":"2021-01-19T15:19:53+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5223"},{"text":"%pyspark\n\n# ---------------------耗电规律分析---------------------\ndf_soc_rule = df_driving_behavior.select('deviceid', 'start_time', 'stop_time', 'start_hour', 'trip_distance', 'avg_speed', 'std_speed', 'rush_times', 'nasty_times',\\\n                                         'rush_times_per100km', 'nasty_times_per100km', 'start_soc', 'delta_soc', 'delta_soc_per100km')\ndf_soc_rule = df_soc_rule.withColumn('distance_range', (df_soc_rule.trip_distance / 10).cast(IntegerType()) * 10)\ndf_soc_rule = df_soc_rule.withColumn('soc_range', (df_soc_rule.start_soc/10).cast(IntegerType())*10)\ndf_soc_rule.show()\n\n# 写入hdfs\ndf_soc_rule = df_soc_rule.repartition(1)\ndf_soc_rule.write.csv('/tmp/dbh_soc_rule', mode='overwrite', header=True)\n","user":"admin","dateUpdated":"2021-01-19T15:19:53+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040793999_-1178945831","id":"20210112-160316_100977974","dateCreated":"2021-01-19T15:19:53+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5224"},{"text":"%pyspark\n\n# ------------------充电行为------------------\ndf_charging = df.filter((df.chargingstatus.isin(['CHARGING_STOPPED', 'CHARGING_FINISH'])) & (df.vehiclestatus=='STOPPED'))\ndf_charging.groupBy('operationmode').count().show()\ndf_charging.groupBy('chargingstatus').count().show()\ndf_charging.groupBy('vehiclestatus').count().show()\ndf_charging.groupBy('gpsvalid').count().show()\nprint '样本数量：', df_charging.count()\n\n# 去除非法gps，中国gps范围：经度（73.66, 135.05）， 纬度（3.86, 53.55）\ndf_charging = df_charging.filter((df_charging.lg.between(73.66, 135.05)) & df_charging.lat.between(3.86, 53.55))\n\ndf_charging = df_charging.select('deviceid', 'soc', 'accmiles', 'chargingstatus', 'lsocwn', 'lg', 'lat', 'timestamp', 'datetime')\n# 经纬度保留3位小数四舍五入（经纬度小数点2位时，误差范围在1.5公里之内，经纬度小数点3位时，误差范围在0.15公里之内）\ndf_charging = df_charging.withColumn('lg_round', df_charging.lg.cast(DecimalType(7,3)))\\\n                         .withColumn('lat_round', df_charging.lat.cast(DecimalType(7,3)))\n\nprint '按经纬度筛选后样本数量：', df_charging.count()\nprint '按经纬度筛选后车辆数量：', df_charging.select('deviceid').distinct().count()\n\n# 分区\ndf_charging = df_charging.repartitionByRange('deviceid')\nprint '分区数量：', df_charging.rdd.getNumPartitions()\n\n# 分区内排序\ndf_charging = df_charging.sortWithinPartitions('timestamp')\ndf_charging.show(5)\n\n","user":"admin","dateUpdated":"2021-01-19T15:19:54+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040794014_503727817","id":"20210112-160315_226780084","dateCreated":"2021-01-19T15:19:54+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5225"},{"text":"%pyspark\n\n# 定义一次充电\nw5 = Window.partitionBy('deviceid').orderBy('timestamp')\ndf_charging = df_charging.withColumn('timestamp_pre', f.lag('timestamp').over(w5))\ndf_charging = df_charging.withColumn('time_diff', df_charging.timestamp - df_charging.timestamp_pre)\ndf_charging = df_charging.withColumn('charging_status', f.when(df_charging.time_diff<300, 0).otherwise(1))\ndf_charging = df_charging.withColumn('charging_id', f.sum(df_charging.charging_status).over(w5))\n\n# 起终充电时间，充电时长\nw6 = Window.partitionBy(['deviceid', 'charging_id'])\ndf_charging = df_charging.withColumn('start_time', f.min(df_charging.datetime).over(w6))\ndf_charging = df_charging.withColumn('stop_time', f.max(df_charging.datetime).over(w6))\nmunite = lambda x:x/60\ndf_charging = df_charging.withColumn('charging_duration', munite(f.unix_timestamp(timestamp='stop_time', format='yyyy-MM-dd HH:mm:ss') - f.unix_timestamp(timestamp='start_time', format='yyyy-MM-dd HH:mm:ss')))\ndf_charging = df_charging.withColumn('charging_duration', df_charging.charging_duration.cast(IntegerType()))\n\n# delta_soc\ndf_charging = df_charging.withColumn('soc', df_charging.soc.cast(IntegerType()))\ndf_charging = df_charging.withColumn('start_soc', f.min('soc').over(w6))\\\n                         .withColumn('stop_soc', f.max('soc').over(w6))\ndf_charging = df_charging.withColumn('delta_soc', df_charging.stop_soc - df_charging.start_soc)\n\n# 去重，获取充电行为\ndf_charging = df_charging.select('deviceid', 'charging_id', 'accmiles', 'start_time', 'stop_time', 'charging_duration', 'start_soc', 'stop_soc', 'delta_soc', 'lg_round', 'lat_round').distinct()\n\n# 相邻两次充电行驶距离\ndf_charging = df_charging.withColumn('accmiles', df_charging.accmiles.cast(DecimalType(7,1)))\nw7 = Window.partitionBy('deviceid').orderBy('charging_id')\ndf_charging = df_charging.withColumn('accmiles_pre', f.lag('accmiles').over(w7))\ndf_charging = df_charging.withColumn('delta_miles', df_charging.accmiles - df_charging.accmiles_pre)\n\n# 是否充到80%\ndf_charging = df_charging.withColumn('charging_to_80', f.when(df_charging.stop_soc>=80, 1). otherwise(0))\n\n# 充到频率（月）\nw8 = Window.partitionBy('deviceid')\ndf_charging = df_charging.withColumn('charging_frequency', f.max('charging_id').over(w8))\n\n#写入hdfs\ndf_charging = df_charging.repartition(1)\ndf_charging.write.csv('/tmp/dbh_charging', mode='overwrite', header=True)\ndf_charging.show()\n","user":"admin","dateUpdated":"2021-01-19T15:19:54+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040794015_-1276408474","id":"20210112-160314_1015212043","dateCreated":"2021-01-19T15:19:54+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5226"},{"text":"%pyspark\n\n\n","user":"admin","dateUpdated":"2021-01-19T15:26:26+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040794016_1578484830","id":"20210112-194314_1547430667","dateCreated":"2021-01-19T15:19:54+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5227"},{"text":"%pyspark\n","user":"admin","dateUpdated":"2021-01-19T15:19:54+0800","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040794020_-2684515","id":"20210112-180637_1648890370","dateCreated":"2021-01-19T15:19:54+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5228"},{"text":"%pyspark\n","user":"admin","dateUpdated":"2021-01-19T15:19:54+0800","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/python"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611040794020_97190890","id":"20201111-120736_1836137493","dateCreated":"2021-01-19T15:19:54+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:5229"}],"name":"dbh_12","id":"2FV3NWA4A","noteParams":{},"noteForms":{},"angularObjects":{"flink:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}