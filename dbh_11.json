{"paragraphs":[{"text":"%spark.conf\n\nspark.jars hdfs:///tmp/junyi/impalajdbc41-2.6.4.jar\n","user":"admin","dateUpdated":"2021-01-28T14:54:28+0800","config":{"editorSetting":{"language":"text","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/text","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1611566536804_-776199982","id":"20210112-134514_819565976","dateCreated":"2021-01-25T17:22:16+0800","dateStarted":"2021-01-28T14:54:28+0800","dateFinished":"2021-01-28T14:54:28+0800","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:1539"},{"text":"%pyspark\n\nfrom pyspark.sql import SparkSession, SQLContext\nspark = SparkSession.builder\\\n        .master('yarn')\\\n        .appName('dbh')\\\n        .config(\"spark.jars\", \"/tmp/junyi/impalajdbc41-2.6.4.jar\")\\\n        .getOrCreate()\n        ","user":"admin","dateUpdated":"2021-01-28T14:54:28+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1611566536805_835207261","id":"20201111-120655_909283917","dateCreated":"2021-01-25T17:22:16+0800","dateStarted":"2021-01-28T14:54:28+0800","dateFinished":"2021-01-28T14:54:28+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1540"},{"text":"%pyspark\n\n# 选择朗逸纯电车型\nsql_mos = \"(select vin from mos.sa_mos_gvs_mysql_vehicle_tm_vehicle where model_id in (1561891753467858944,1561943411266703361,1615177859160764416)) as ods_mos\"\ndf_lavida_ev = spark.read\\\n                    .format(\"jdbc\")\\\n                    .option(\"url\", \"jdbc:impala://svlhdp014.csvw.com:25004/mos;AuthMech=3;UID=scb;PWD=scb\")\\\n                    .option(\"driver\", \"com.cloudera.impala.jdbc41.Driver\")\\\n                    .option(\"dbtable\", sql_mos)\\\n                    .load()\n\nprint sql_mos\nprint 'lavida_ev_count:', df_lavida_ev.count()\ndf_lavida_ev.show(5)\n","user":"admin","dateUpdated":"2021-01-28T14:54:29+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"(select vin from mos.sa_mos_gvs_mysql_vehicle_tm_vehicle where model_id in (1561891753467858944,1561943411266703361,1615177859160764416)) as ods_mos\nlavida_ev_count: 4404\n+-----------------+\n|              vin|\n+-----------------+\n|LSVAX60E7K2018997|\n|LSVAY60E5K2010359|\n|LSVAY60E6K2010421|\n|LSVAY60E2K2010271|\n|LSVAY60E3K2010229|\n+-----------------+\nonly showing top 5 rows\n\n"}]},"apps":[],"jobName":"paragraph_1611566536805_472706412","id":"20210112-134132_1908095674","dateCreated":"2021-01-25T17:22:16+0800","dateStarted":"2021-01-28T14:54:29+0800","dateFinished":"2021-01-28T14:54:29+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1541"},{"text":"%pyspark\n\n# 设定日期\nyear = 2020\nmonth = 11\n\n# 读取2020-11所有车辆vin码\nsql_vin = \"(select distinct(deviceid) from rtm.ods_rtm where (year(dt)=\" +str(year) + \") and (month(dt) = \" + str(month) + \")) as ods_rtm_vin\"\ndf_vin = spark.read\\\n        .format(\"jdbc\")\\\n        .option(\"url\", \"jdbc:impala://svlhdp014.csvw.com:25004/mos;AuthMech=3;UID=scb;PWD=scb\")\\\n        .option(\"driver\", \"com.cloudera.impala.jdbc41.Driver\")\\\n        .option(\"dbtable\", sql_vin)\\\n        .load()\n\nprint 'vin count in ' + str(year) + '-' + str(month) + ' :', df_vin.count()\ndf_vin = df_vin.toPandas()\n","user":"admin","dateUpdated":"2021-01-28T14:54:29+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"vin count in 2020-11 : 65680\n"}]},"apps":[],"jobName":"paragraph_1611566536805_-2077136420","id":"20210115-135921_2084968971","dateCreated":"2021-01-25T17:22:16+0800","dateStarted":"2021-01-28T14:54:30+0800","dateFinished":"2021-01-28T14:54:43+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1542"},{"text":"%pyspark\n\n# 筛选出朗逸纯电车型的vin码\ndf_lavida_ev = df_lavida_ev.toPandas()\nlavida_ev_list = df_lavida_ev['vin'].tolist()\ndf_vin_lavida = df_vin[df_vin['deviceid'].isin(lavida_ev_list)]\nvin_list = df_vin_lavida['deviceid'].tolist()\nprint 'lavida vin num in November:', len(vin_list)\nprint 'vin_list_5:', vin_list[:5]\n","user":"admin","dateUpdated":"2021-01-28T14:54:43+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"lavida vin num in November: 3825\nvin_list_5: [u'LSVAY60E8K2011098', u'LSVAY60E1K2010486', u'LSVAY60E5K2013018', u'LSVAY60E6K2012234', u'LSVAY60E4K2011034']\n"}]},"apps":[],"jobName":"paragraph_1611566536805_2070145650","id":"20201111-120740_1392915044","dateCreated":"2021-01-25T17:22:16+0800","dateStarted":"2021-01-28T14:54:43+0800","dateFinished":"2021-01-28T14:54:43+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1543"},{"text":"%pyspark\n\n# read rtm\ncols = ['uploadtime','deviceid','vehiclestatus','chargingstatus','operationmode','vehiclespeed','accmiles','soc','gp','accpedtrav','brakepedstat','emspeed','emtq','mxal','celohwn','lsocwn','lg','lat','gpsvalid', 'dt']\nsql_rtm = \"(select \"  + ','.join(cols) + \" from rtm.ods_rtm where (year(dt)=\" + str(year) + \") and (month(dt) = \" + str(month) + \")) as ods_rtm\"\nprint 'sql:', sql_rtm\n\ndf = spark.read\\\n    .format(\"jdbc\")\\\n    .option(\"url\", \"jdbc:impala://svlhdp014.csvw.com:25004/mos;AuthMech=3;UID=scb;PWD=scb\")\\\n    .option(\"driver\", \"com.cloudera.impala.jdbc41.Driver\")\\\n    .option(\"dbtable\", sql_rtm)\\\n    .load()\ndf.createOrReplaceTempView('table')\n","user":"admin","dateUpdated":"2021-01-28T14:54:44+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"sql: (select uploadtime,deviceid,vehiclestatus,chargingstatus,operationmode,vehiclespeed,accmiles,soc,gp,accpedtrav,brakepedstat,emspeed,emtq,mxal,celohwn,lsocwn,lg,lat,gpsvalid,dt from rtm.ods_rtm where (year(dt)=2020) and (month(dt) = 11)) as ods_rtm\n"}]},"apps":[],"jobName":"paragraph_1611566536805_1657050857","id":"20201111-120739_1775499243","dateCreated":"2021-01-25T17:22:16+0800","dateStarted":"2021-01-28T14:54:44+0800","dateFinished":"2021-01-28T14:54:44+0800","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:1544"},{"text":"%pyspark\n\n# 选择11月份所有Lavida数据\ndf = df[df.deviceid.isin(vin_list)]\nprint 'deviceid num:', df.select('deviceid').distinct().count()\nprint 'data count:', df.count()\n","user":"admin","dateUpdated":"2021-01-28T14:54:44+0800","config":{"tableHide":false,"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536805_373360161","id":"20210112-140033_253735156","dateCreated":"2021-01-25T17:22:16+0800","dateStarted":"2021-01-28T14:54:44+0800","dateFinished":"2021-01-28T14:34:16+0800","status":"RUNNING","progressUpdateIntervalMs":500,"$$hashKey":"object:1545","errorMessage":""},{"text":"%pyspark\n\n# 样本数据查看\nprint 'groupBy operationmode:'\ndf.groupBy('operationmode').count().show()\nprint 'groupBy chargingstatus:'\ndf.groupBy('chargingstatus').count().show()\nprint 'groupBy vehiclestatus:'\ndf.groupBy('vehiclestatus').count().show()\n\n# 转换时间\nimport pyspark.sql.functions as f\nfrom pyspark.sql.types import *\ndf = df.withColumn('timestamp', df.uploadtime.cast(DoubleType())/1000.0)\ndf = df.withColumn('datetime', f.from_unixtime(df.timestamp, format=\"yyyy-MM-dd HH:mm:ss\"))\ndf = df.drop('uploadtime')\ndf = df.filter((f.year(df.dt)==f.year(df.datetime)) & (f.month(df.dt)==f.month(df.datetime)) & (f.dayofmonth(df.dt)==f.dayofmonth(df.datetime)))\nprint 'df count:', df.count()\ndf.show(5)\n\n","user":"admin","dateUpdated":"2021-01-28T14:34:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536806_623467354","id":"20201111-142710_729063603","dateCreated":"2021-01-25T17:22:16+0800","dateStarted":"2021-01-28T14:34:16+0800","status":"ABORT","progressUpdateIntervalMs":500,"$$hashKey":"object:1546","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"groupBy operationmode:\n+-------------+--------+\n|operationmode|   count|\n+-------------+--------+\n|        ERROR|       5|\n|           EV|46929012|\n|      INVALID|       5|\n+-------------+--------+\n\ngroupBy chargingstatus:\n+----------------+--------+\n|  chargingstatus|   count|\n+----------------+--------+\n|           ERROR|      43|\n|     NO_CHARGING|29534521|\n|CHARGING_STOPPED|17280186|\n| CHARGING_FINISH|  114049|\n|         INVALID|     223|\n+----------------+--------+\n\ngroupBy vehiclestatus:\n+-------------+--------+\n|vehiclestatus|   count|\n+-------------+--------+\n|        ERROR|     222|\n|      STOPPED|17839203|\n|      STARTED|29089597|\n+-------------+--------+\n\ndf count:"},{"type":"TEXT","data":"Fail to execute line 16: print 'df count:', df.count()\nTraceback (most recent call last):\n  File \"/tmp/zeppelin_pyspark-253414515424282429.py\", line 375, in <module>\n    exec(code, _zcUserQueryNameSpace)\n  File \"<stdin>\", line 16, in <module>\n  File \"/opt/cloudera/parcels/CDH-6.1.1-1.cdh6.1.1.p0.875250/lib/spark/python/lib/pyspark.zip/pyspark/sql/dataframe.py\", line 522, in count\n    return int(self._jdf.count())\n  File \"/opt/cloudera/parcels/CDH-6.1.1-1.cdh6.1.1.p0.875250/lib/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\", line 1255, in __call__\n    answer = self.gateway_client.send_command(command)\n  File \"/opt/cloudera/parcels/CDH-6.1.1-1.cdh6.1.1.p0.875250/lib/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\", line 985, in send_command\n    response = connection.send_command(command)\n  File \"/opt/cloudera/parcels/CDH-6.1.1-1.cdh6.1.1.p0.875250/lib/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py\", line 1152, in send_command\n    answer = smart_decode(self.stream.readline()[:-1])\n  File \"/usr/lib64/python2.7/socket.py\", line 447, in readline\n    data = self._sock.recv(self._rbufsize)\n  File \"/opt/cloudera/parcels/CDH-6.1.1-1.cdh6.1.1.p0.875250/lib/spark/python/lib/pyspark.zip/pyspark/context.py\", line 252, in signal_handler\n    raise KeyboardInterrupt()\nKeyboardInterrupt\n"}]},"dateFinished":"2021-01-28T14:37:44+0800"},{"text":"%pyspark\n\n#-------------------------------车辆活动特征分析-------------------------------\n# 数据筛选-车辆状态\ndf_vehicle = df.filter((df.operationmode=='EV') & (df.chargingstatus=='NO_CHARGING') & (df.vehiclestatus=='STARTED'))\n# 去除非法gps，中国gps范围：经度（73.66, 135.05）， 纬度（3.86, 53.55）\ndf_vehicle = df_vehicle.filter((df_vehicle.lg.between(73.66, 135.05)) & df_vehicle.lat.between(3.86, 53.55))\nprint 'df_count:', df_vehicle.count()\ndf_vehicle.select('deviceid','operationmode','chargingstatus','vehiclestatus','vehiclespeed','accpedtrav','brakepedstat','lg','lat','gpsvalid','dt').show()\n\n# 数据筛选-报文数量大于1000的车辆\ndf_count = df_vehicle.groupBy('deviceid').count().orderBy('count')\ndf_count = df_count.filter(df_count['count']>=1000)\ndf_count.show(5)\nprint 'vin num selected:', df_count.count()\ndf_count = df_count.drop('count')\ndf_vehicle = df_vehicle.join(df_count, on='deviceid', how='inner')\nprint 'vin num verify:', df_vehicle.select('deviceid').distinct().count()\n\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536806_-737516865","id":"20201111-121513_195336469","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1547"},{"text":"%pyspark\n\n# 分区\ndf_vehicle = df_vehicle.repartitionByRange('deviceid')\nprint 'partition_num:', df_vehicle.rdd.getNumPartitions()\n\n# 分区内按时间排序\ndf_vehicle = df_vehicle.sortWithinPartitions('timestamp', ascending=True)\ndf_vehicle.select('deviceid','operationmode','chargingstatus','vehiclestatus', 'dt', 'timestamp', 'datetime', 'lg', 'lat').show(100)\n\n# 平移timestamp\nfrom pyspark.sql import Window\nw1 = Window.partitionBy('deviceid').orderBy('timestamp')\ndf_vehicle = df_vehicle.withColumn('timestamp_pre', f.lag('timestamp').over(w1))\ndf_vehicle = df_vehicle.withColumn('time_diff', df_vehicle.timestamp - df_vehicle.timestamp_pre)\ndf_vehicle = df_vehicle.withColumn('trip_status', f.when(df_vehicle.time_diff<300, 0).otherwise(1))\ndf_vehicle.select('deviceid', 'dt', 'timestamp', 'datetime', 'timestamp_pre', 'time_diff', 'trip_status', 'lg', 'lat').show(10)\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536806_-1627487007","id":"20201111-120739_130415404","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1548"},{"text":"%pyspark\n\n# 行程id\nw2 = Window.partitionBy('deviceid').orderBy('timestamp').rowsBetween(Window.unboundedPreceding, Window.currentRow)\ndf_vehicle = df_vehicle.withColumn('trip_id', f.sum('trip_status').over(w2))\ndf_vehicle.select('deviceid', 'dt', 'timestamp', 'datetime', 'timestamp_pre', 'time_diff', 'trip_status', 'trip_id', 'lg', 'lat').show(200)\n\n# 删除报文数据有间断的行程\nw3 = Window.partitionBy(['deviceid', 'trip_id'])\ndf_vehicle = df_vehicle.withColumn('greater_56', f.when(df_vehicle.time_diff>56, 1).otherwise(0))\ndf_vehicle = df_vehicle.withColumn('greater_56_times', f.sum('greater_56').over(w3))\ndf_vehicle.select('deviceid', 'dt', 'timestamp', 'datetime', 'timestamp_pre', 'time_diff', 'trip_status', 'trip_id', 'greater_56', 'greater_56_times', 'lg', 'lat').show()\ndf_vehicle = df_vehicle.filter(df_vehicle.greater_56_times<2)\nprint '删除报文间断行程后样本数量：', df_vehicle.count()\ndf_vehicle.select('deviceid', 'dt', 'timestamp', 'datetime', 'timestamp_pre', 'time_diff', 'trip_status', 'trip_id', 'greater_56', 'greater_56_times', 'lg', 'lat').show()\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536806_1249897816","id":"20201111-120739_1840804804","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1549"},{"text":"%pyspark\n\n# 行程起始时间和终止时间\nw3 = Window.partitionBy(['deviceid', 'trip_id'])\ndf_vehicle = df_vehicle.withColumn('start_time', f.from_unixtime(f.min('timestamp').over(w3), format=\"yyyy-MM-dd HH:mm:ss\"))\\\n                        .withColumn('stop_time', f.from_unixtime(f.max('timestamp').over(w3), format=\"yyyy-MM-dd HH:mm:ss\"))\ndf_vehicle.select('deviceid', 'accmiles', 'dt', 'timestamp', 'datetime', 'timestamp_pre', 'time_diff', 'trip_status', 'trip_id', 'start_time', 'stop_time', 'lg', 'lat').show(50)\n\n# 行程时长（分钟）\ndf_vehicle = df_vehicle.withColumn('trip_duration', f.max('timestamp').over(w3) - f.min('timestamp').over(w3))\ndf_vehicle = df_vehicle.withColumn('trip_duration', df_vehicle.trip_duration/60)\n\n# 行程距离\ndf_vehicle = df_vehicle.withColumn('trip_distance', f.max(df_vehicle.accmiles.cast(DecimalType(6,1))).over(w3) - f.min(df_vehicle.accmiles.cast(DecimalType(6,1))).over(w3))\ndf_vehicle.select('deviceid', 'accmiles', 'dt', 'timestamp', 'datetime', 'timestamp_pre', 'time_diff', 'trip_status', 'trip_id', 'start_time', 'stop_time', 'trip_duration', 'trip_distance', 'lg', 'lat').show(50)\n\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536806_-1704378014","id":"20201111-120739_1275003553","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1550"},{"text":"%pyspark\n\n# 行程起始经纬度和终止经纬度\nfrom pyspark.sql.functions import PandasUDFType, pandas_udf\n@pandas_udf(\"deviceid string, trip_id int, lg string, start_lg string\", PandasUDFType.GROUPED_MAP)\ndef get_start_lg(df_x):\n    df_x = df_x.assign(start_lg = df_x['lg'].head(1).tolist()[0])\n    return df_x\ndf_start_lg = df_vehicle.select('deviceid', 'trip_id', 'lg').groupby(['deviceid', 'trip_id']).apply(get_start_lg)\ndf_start_lg = df_start_lg.drop('lg').distinct()\n\n@pandas_udf(\"deviceid string, trip_id int, lat string, start_lat string\", PandasUDFType.GROUPED_MAP)\ndef get_start_lat(df_x):\n    df_x = df_x.assign(start_lat = df_x['lat'].head(1).tolist()[0])\n    return df_x\ndf_start_lat = df_vehicle.select('deviceid', 'trip_id', 'lat').groupby(['deviceid', 'trip_id']).apply(get_start_lat)\ndf_start_lat = df_start_lat.drop('lat').distinct()\n\n@pandas_udf(\"deviceid string, trip_id int, lg string, stop_lg string\", PandasUDFType.GROUPED_MAP)\ndef get_stop_lg(df_x):\n    df_x = df_x.assign(stop_lg = df_x['lg'].tail(1).tolist()[0])\n    return df_x\ndf_stop_lg = df_vehicle.select('deviceid', 'trip_id', 'lg').groupby(['deviceid', 'trip_id']).apply(get_stop_lg)\ndf_stop_lg = df_stop_lg.drop('lg').distinct()\n\n@pandas_udf(\"deviceid string, trip_id int, lat string, stop_lat string\", PandasUDFType.GROUPED_MAP)\ndef get_stop_lat(df_x):\n    df_x = df_x.assign(stop_lat = df_x['lat'].tail(1).tolist()[0])\n    return df_x\ndf_stop_lat = df_vehicle.select('deviceid', 'trip_id', 'lat').groupby(['deviceid', 'trip_id']).apply(get_stop_lat)\ndf_stop_lat = df_stop_lat.drop('lat').distinct()\n\n# 组成起止gps\ndf_gps = df_start_lg.join(df_start_lat, on=['deviceid', 'trip_id'], how='inner')\ndf_gps = df_gps.join(df_stop_lg, on=['deviceid', 'trip_id'], how='inner')\ndf_gps = df_gps.join(df_stop_lat, on=['deviceid', 'trip_id'], how='inner')\ndf_gps.show()\n\n# 把gps加入到df_vehicle表中\ndf_vehicle = df_vehicle.join(df_gps, on=['deviceid', 'trip_id'], how='inner')\ndf_vehicle.select('deviceid', 'trip_id', 'timestamp', 'start_time', 'stop_time', 'trip_duration', 'lg', 'lat', 'start_lg', 'start_lat', 'stop_lg', 'stop_lat', 'trip_distance').show(100)\n\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536806_-2052480974","id":"20201111-120739_457692211","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1551"},{"text":"%pyspark\n\n# 删除行程距离小于1km的行程\ndf_vehicle = df_vehicle.filter(df_vehicle.trip_distance>=1)\nprint '删除后，车辆数量：', df_vehicle.select('deviceid').distinct().count()\nprint '删除后，样本数量：', df_vehicle.count()\n\n# 写入hdfs\ndf_vehicle = df_vehicle.withColumn('lg', df_vehicle.lg.cast(DoubleType()))\\\n                       .withColumn('lat', df_vehicle.lat.cast(DoubleType()))\ndf_vehicle = df_vehicle.repartition(1)\ndf_vehicle.write.csv('/tmp/dbh_trip_basic_' + str(year) + '-' + str(month), mode='overwrite', header=True)\n","user":"admin","dateUpdated":"2021-01-28T14:42:57+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536806_597374664","id":"20201111-120738_886604453","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1552"},{"text":"%pyspark\n\n# 行程表\ndf_trip = df_vehicle.select('deviceid', 'trip_id', 'start_time', 'stop_time', 'trip_duration', 'start_lg', 'start_lat', 'stop_lg', 'stop_lat', 'trip_distance').distinct()\nprint 'trip_num:', df_trip.count()\nprint 'trip datatypes:', df_trip.dtypes\ndf_trip.show()\n# 写入hdfs\ndf_trip = df_trip.repartition(1)\ndf_trip.write.csv('/tmp/dbh_trip_id_' + str(year) + '-' + str(month), mode='overwrite', header=True)\n","user":"admin","dateUpdated":"2021-01-28T14:43:14+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536806_-598376732","id":"20201111-120738_491710542","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1553"},{"text":"%pyspark\n\n# 车辆出行特征\ndf_vehicle_behavior = df_vehicle.select('deviceid', 'trip_id', 'start_time', 'stop_time',  'trip_distance', 'soc')\ndf_vehicle_behavior = df_vehicle_behavior.withColumn('soc', df_vehicle_behavior.soc.cast(IntegerType()))\\\n                                         .withColumn('start_hour', f.hour(df_vehicle_behavior.start_time.cast(TimestampType())))\nw4 = Window.partitionBy(['deviceid', 'trip_id'])\ndf_vehicle_behavior = df_vehicle_behavior.withColumn('start_soc', f.max('soc').over(w4))\\\n                                         .withColumn('stop_soc', f.min('soc').over(w4))\ndf_vehicle_behavior = df_vehicle_behavior.drop('soc').distinct()\nmunite = lambda x:x/60\ndf_vehicle_behavior = df_vehicle_behavior.withColumn('trip_duration', munite(f.unix_timestamp(timestamp='stop_time', format='yyyy-MM-dd HH:mm:ss')\\\n                                                                             - f.unix_timestamp(timestamp='start_time', format='yyyy-MM-dd HH:mm:ss')))\ndf_vehicle_behavior = df_vehicle_behavior.withColumn('trip_duration', df_vehicle_behavior.trip_duration.cast(DecimalType(7,1)))\ndf_vehicle_behavior = df_vehicle_behavior.withColumn('delta_soc', df_vehicle_behavior.start_soc - df_vehicle_behavior.stop_soc)\n\ndf_vehicle_behavior = df_vehicle_behavior.withColumn('distance_range', (df_vehicle_behavior.trip_distance / 10).cast(IntegerType()) * 10)\ndf_vehicle_behavior = df_vehicle_behavior.withColumn('soc_range', (df_vehicle_behavior.start_soc/10).cast(IntegerType())*10)\n\n# 写入hdfs\ndf_vehicle_behavior = df_vehicle_behavior.repartition(1)\ndf_vehicle_behavior.write.csv('/tmp/dbh_vehicle_behavior_' + str(year) + '-' + str(month), mode='overwrite', header=True)\n","user":"admin","dateUpdated":"2021-01-28T14:43:37+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536806_-1581442060","id":"20201111-120738_1845702386","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1554"},{"text":"%pyspark\n\n# ----------------------------驾驶行为----------------------------\ndf_driving_behavior = df_vehicle.select('deviceid', 'trip_id', 'start_time', 'stop_time', 'trip_duration', 'trip_distance', 'soc', 'vehiclespeed', 'accpedtrav', 'brakepedstat', 'emspeed', 'emtq', 'mxal', 'celohwn', 'lsocwn', 'start_lg', 'start_lat', 'stop_lg', 'stop_lat')\n\n# 计算功率\ndf_driving_behavior = df_driving_behavior.withColumn('emspeed', df_driving_behavior.emspeed.cast(IntegerType()))\ndf_driving_behavior = df_driving_behavior.withColumn('emtq', df_driving_behavior.emtq.cast(IntegerType()))\ndf_driving_behavior = df_driving_behavior.withColumn('power', df_driving_behavior.emspeed * df_driving_behavior.emtq / 9500)\ndf_driving_behavior = df_driving_behavior.withColumn('power', df_driving_behavior.power.cast(DecimalType(7,2)))\n\n# 功率写入hdfs\ndf_power = df_driving_behavior.select('vehiclespeed', 'accpedtrav', 'brakepedstat', 'power')\n#df_power.write.csv('/tmp/dbh_vehicle_power_' + str(year) + '-' + str(month), mode='overwrite', header=True)\n#df_power.show()\n\n# 删除功率相关字段\ndf_driving_behavior = df_driving_behavior.drop('emspeed', 'emtq', 'power')\n\ndf_driving_behavior.show()\n\n","user":"admin","dateUpdated":"2021-01-28T14:45:25+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536807_-230772789","id":"20201111-120737_1487905713","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1555"},{"text":"%pyspark\n\n# 行程中停车次数\ndf_driving_behavior = df_driving_behavior.withColumn('speed', df_driving_behavior.vehiclespeed.cast(DecimalType(5,1)).cast(DoubleType()))\ndf_stop_times = df_driving_behavior.filter(df_driving_behavior.vehiclespeed==0.0).select('deviceid', 'trip_id')\ndf_stop_times = df_stop_times.groupby(['deviceid', 'trip_id']).count()\ndf_stop_times.show()\n\n# 匹配到驾驶行为中\ndf_driving_behavior = df_driving_behavior.join(df_stop_times, on=['deviceid', 'trip_id'], how='left')\ndf_driving_behavior = df_driving_behavior.withColumnRenamed('count', 'stop_times')\ndf_driving_behavior = df_driving_behavior.fillna({'stop_times':0})\ndf_driving_behavior.show(200)\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536807_-1842840185","id":"20210112-160317_347387228","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1556"},{"text":"%pyspark\n\n# 超速次数\ndf_driving_behavior = df_driving_behavior.withColumn('speeding', f.when(df_driving_behavior.speed>120, 1).otherwise(0))\ndf_driving_behavior = df_driving_behavior.withColumn('speeding_times', f.sum(df_driving_behavior.speeding).over(w4))\ndf_driving_behavior = df_driving_behavior.drop('speeding')\n\n# 平均速度、最大速度、速度标准差\ndf_driving_behavior = df_driving_behavior.replace(0.0, None, subset=['speed'])\ndf_driving_behavior = df_driving_behavior.withColumn('max_speed', f.max('speed').over(w4))\\\n                                         .withColumn('avg_speed', f.avg('speed').over(w4))\\\n                                         .withColumn('std_speed', f.stddev('speed').over(w4))\n\n# 急加速和急减速\ndf_driving_behavior = df_driving_behavior.withColumn('accpedtrav', df_driving_behavior.accpedtrav.cast(IntegerType()))\\\n                                         .withColumn('brakepedstat', df_driving_behavior.brakepedstat.cast(IntegerType()))\ndf_driving_behavior = df_driving_behavior.withColumn('is_rush', f.when(df_driving_behavior.accpedtrav>24, 1).otherwise(0))\\\n                                         .withColumn('is_nasty', f.when(df_driving_behavior.brakepedstat>19, 1).otherwise(0))\ndf_driving_behavior = df_driving_behavior.withColumn('rush_times', f.sum('is_rush').over(w4))\\\n                                         .withColumn('nasty_times', f.sum('is_nasty').over(w4))\n\n# 每百公里急加速和急减速次数\ndf_driving_behavior = df_driving_behavior.withColumn('rush_times_per100km', df_driving_behavior.rush_times / df_driving_behavior.trip_distance * 100)\\\n                                         .withColumn('nasty_times_per100km', df_driving_behavior.nasty_times / df_driving_behavior.trip_distance * 100)\ndf_driving_behavior = df_driving_behavior.withColumn('rush_times_per100km', df_driving_behavior.rush_times_per100km.cast(DecimalType(7,1)))\\\n                                         .withColumn('nasty_times_per100km', df_driving_behavior.nasty_times_per100km.cast(DecimalType(7,1)))\n# 耗电量\ndf_driving_behavior = df_driving_behavior.withColumn('soc', df_driving_behavior.soc.cast(IntegerType()))\ndf_driving_behavior = df_driving_behavior.withColumn('start_soc', f.max('soc').over(w4))\\\n                                         .withColumn('stop_soc', f.min('soc').over(w4))\ndf_driving_behavior = df_driving_behavior.withColumn('delta_soc', df_driving_behavior.start_soc - df_driving_behavior.stop_soc)\n\n# 每百公里耗电量\ndf_driving_behavior = df_driving_behavior.withColumn('delta_soc_per100km', df_driving_behavior.delta_soc / df_driving_behavior.trip_distance * 100)\ndf_driving_behavior = df_driving_behavior.withColumn('delta_soc_per100km', df_driving_behavior.delta_soc_per100km.cast(DecimalType(5,1)))\n\n# 最高报警等级次数\ndf_driving_behavior = df_driving_behavior.withColumn('mxal', df_driving_behavior.mxal.cast(IntegerType()))\ndf_driving_behavior = df_driving_behavior.withColumn('is_mxal', f.when(df_driving_behavior.mxal==3, 1).otherwise(0))\ndf_driving_behavior = df_driving_behavior.withColumn('mxal_times', f.sum('is_mxal').over(w4))\n\n# 电池高温报警次数\ndf_driving_behavior = df_driving_behavior.withColumn('celohwn', df_driving_behavior.celohwn.cast(BooleanType()).cast(IntegerType()))\ndf_driving_behavior = df_driving_behavior.withColumn('celohwn_times', f.sum('celohwn').over(w4))\n\n# soc低报警次数\ndf_driving_behavior = df_driving_behavior.withColumn('lsocwn', df_driving_behavior.lsocwn.cast(BooleanType()).cast(IntegerType()))\ndf_driving_behavior = df_driving_behavior.withColumn('lsocwn_times', f.sum('lsocwn').over(w4))\n\n# 去重\ndf_driving_behavior = df_driving_behavior.drop('soc', 'vehiclespeed', 'accpedtrav', 'brakepedstat', 'mxal', 'celohwn', 'lsocwn', 'speed', 'is_rush', 'is_nasty', 'is_mxal')\ndf_driving_behavior = df_driving_behavior.distinct()\nprint '行程数量：', df_driving_behavior.count()\n\n# 行程起始小时\ndf_driving_behavior = df_driving_behavior.withColumn('start_hour', f.hour(df_vehicle_behavior.start_time.cast(TimestampType())))\n\n# 写入hdfs\ndf_driving_behavior = df_driving_behavior.repartition(1)\ndf_driving_behavior.write.csv('/tmp/dbh_driving_behavior_' + str(year) + '-' + str(month), mode='overwrite', header=True)\n\ndf_driving_behavior.show(200)\n","user":"admin","dateUpdated":"2021-01-28T14:43:46+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536807_1251739829","id":"20210112-163449_112779573","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1557"},{"text":"%pyspark\n\n# ---------------------耗电规律分析---------------------\ndf_soc_rule = df_driving_behavior.select('deviceid', 'start_time', 'stop_time', 'start_hour', 'trip_distance', 'avg_speed', 'std_speed', 'rush_times', 'nasty_times',\\\n                                         'rush_times_per100km', 'nasty_times_per100km', 'start_soc', 'delta_soc', 'delta_soc_per100km')\ndf_soc_rule = df_soc_rule.withColumn('distance_range', (df_soc_rule.trip_distance / 10).cast(IntegerType()) * 10)\ndf_soc_rule = df_soc_rule.withColumn('soc_range', (df_soc_rule.start_soc/10).cast(IntegerType())*10)\ndf_soc_rule.show()\n\n# 写入hdfs\ndf_soc_rule = df_soc_rule.repartition(1)\ndf_soc_rule.write.csv('/tmp/dbh_soc_rule_' + str(year) + '-' + str(month), mode='overwrite', header=True)\n","user":"admin","dateUpdated":"2021-01-28T14:43:57+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536807_826401497","id":"20210112-160316_100977974","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1558"},{"text":"%pyspark\n\n# ------------------充电行为------------------\ndf_charging = df.filter((df.chargingstatus.isin(['CHARGING_STOPPED', 'CHARGING_FINISH'])) & (df.vehiclestatus=='STOPPED'))\ndf_charging.groupBy('operationmode').count().show()\ndf_charging.groupBy('chargingstatus').count().show()\ndf_charging.groupBy('vehiclestatus').count().show()\ndf_charging.groupBy('gpsvalid').count().show()\nprint '样本数量：', df_charging.count()\n\n# 去除非法gps，中国gps范围：经度（73.66, 135.05）， 纬度（3.86, 53.55）\ndf_charging = df_charging.filter((df_charging.lg.between(73.66, 135.05)) & df_charging.lat.between(3.86, 53.55))\n\ndf_charging = df_charging.select('deviceid', 'soc', 'accmiles', 'chargingstatus', 'lsocwn', 'lg', 'lat', 'timestamp', 'datetime')\n# 经纬度保留3位小数四舍五入（经纬度小数点2位时，误差范围在1.5公里之内，经纬度小数点3位时，误差范围在0.15公里之内）\ndf_charging = df_charging.withColumn('lg_round', df_charging.lg.cast(DecimalType(7,3)))\\\n                         .withColumn('lat_round', df_charging.lat.cast(DecimalType(7,3)))\n\nprint '按经纬度筛选后样本数量：', df_charging.count()\nprint '按经纬度筛选后车辆数量：', df_charging.select('deviceid').distinct().count()\n\n# 分区\ndf_charging = df_charging.repartitionByRange('deviceid')\nprint '分区数量：', df_charging.rdd.getNumPartitions()\n\n# 分区内排序\ndf_charging = df_charging.sortWithinPartitions('timestamp')\ndf_charging.show(5)\n\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536807_-545795797","id":"20210112-160315_226780084","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1559"},{"text":"%pyspark\n\n# 定义一次充电\nw5 = Window.partitionBy('deviceid').orderBy('timestamp')\ndf_charging = df_charging.withColumn('timestamp_pre', f.lag('timestamp').over(w5))\ndf_charging = df_charging.withColumn('time_diff', df_charging.timestamp - df_charging.timestamp_pre)\ndf_charging = df_charging.withColumn('charging_status', f.when(df_charging.time_diff<300, 0).otherwise(1))\ndf_charging = df_charging.withColumn('charging_id', f.sum(df_charging.charging_status).over(w5))\n\n# 起终充电时间，充电时长\nw6 = Window.partitionBy(['deviceid', 'charging_id'])\ndf_charging = df_charging.withColumn('start_time', f.min(df_charging.datetime).over(w6))\ndf_charging = df_charging.withColumn('stop_time', f.max(df_charging.datetime).over(w6))\nmunite = lambda x:x/60\ndf_charging = df_charging.withColumn('charging_duration', munite(f.unix_timestamp(timestamp='stop_time', format='yyyy-MM-dd HH:mm:ss') - f.unix_timestamp(timestamp='start_time', format='yyyy-MM-dd HH:mm:ss')))\ndf_charging = df_charging.withColumn('charging_duration', df_charging.charging_duration.cast(IntegerType()))\n\n# delta_soc\ndf_charging = df_charging.withColumn('soc', df_charging.soc.cast(IntegerType()))\ndf_charging = df_charging.withColumn('start_soc', f.min('soc').over(w6))\\\n                         .withColumn('stop_soc', f.max('soc').over(w6))\ndf_charging = df_charging.withColumn('delta_soc', df_charging.stop_soc - df_charging.start_soc)\n\n# 去重，获取充电行为\ndf_charging = df_charging.select('deviceid', 'charging_id', 'accmiles', 'start_time', 'stop_time', 'charging_duration', 'start_soc', 'stop_soc', 'delta_soc', 'lg_round', 'lat_round').distinct()\n\n# 相邻两次充电行驶距离\ndf_charging = df_charging.withColumn('accmiles', df_charging.accmiles.cast(DecimalType(7,1)))\nw7 = Window.partitionBy('deviceid').orderBy('charging_id')\ndf_charging = df_charging.withColumn('accmiles_pre', f.lag('accmiles').over(w7))\ndf_charging = df_charging.withColumn('delta_miles', df_charging.accmiles - df_charging.accmiles_pre)\n\n# 是否充到80%\ndf_charging = df_charging.withColumn('charging_to_80', f.when(df_charging.stop_soc>=80, 1). otherwise(0))\n\n# 充到频率（月）\nw8 = Window.partitionBy('deviceid')\ndf_charging = df_charging.withColumn('charging_frequency', f.max('charging_id').over(w8))\n\n#写入hdfs\ndf_charging = df_charging.repartition(1)\ndf_charging.write.csv('/tmp/dbh_charging_' + str(year) + '-' + str(month), mode='overwrite', header=True)\ndf_charging.show()\n","user":"admin","dateUpdated":"2021-01-28T14:44:05+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536807_1976294928","id":"20210112-160314_1015212043","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1560"},{"text":"%pyspark\n\n# ----------------------获取家gps---------------------------\nimport pandas as pd\n\n# 调用UDF之前必须先把lg、lat的Decimal数据类型转换Double数据类型，否则会报错“cannot run anywhere due to node and executor blacklist.”，也许是zeppelin平台bug\ndf_home = df_charging.select('deviceid', 'lg_round', 'lat_round')\ndf_home = df_home.withColumn('lg', df_home.lg_round.cast(DoubleType()))\\\n                 .withColumn('lat', df_home.lat_round.cast(DoubleType()))\n\n# 如果使用两个参数，使用mode函数时，返回值类型只能是int，使用mean函数时可以用double，也许是zepplin平台bug\n@pandas_udf(\"deviceid string, lg double, home_lg double\", PandasUDFType.GROUPED_MAP)\ndef get_lg_mode(df_x):\n    return df_x.assign(home_lg = df_x.lg.mode()[0])\ndf_lg_mode = df_home.select('deviceid', 'lg').groupby('deviceid').apply(get_lg_mode)\ndf_lg_mode = df_lg_mode.drop('lg').dropDuplicates(subset=['deviceid', 'home_lg'])\nprint '经度数量：', df_lg_mode.count()\n\n@pandas_udf(\"deviceid string, lat double, home_lat double\", PandasUDFType.GROUPED_MAP)\ndef get_lat_mode(df_x):\n    return df_x.assign(home_lat = df_x.lat.mode()[0])\ndf_lat_mode = df_home.select('deviceid', 'lat').groupby('deviceid').apply(get_lat_mode)\ndf_lat_mode = df_lat_mode.drop('lat').dropDuplicates(subset=['deviceid', 'home_lat'])\nprint '纬度数量：', df_lat_mode.count()\n\ndf_home = df_lg_mode.join(df_lat_mode, on=['deviceid'], how='inner')\ndf_home.show()\n\n# 写入hdfs\ndf_home.write.csv('/tmp/dbh_home_gps_' + str(year) + '-' + str(month), mode='overwrite', header=True)\n","user":"admin","dateUpdated":"2021-01-28T14:44:17+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536807_-2112089234","id":"20210112-160312_670940920","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1562"},{"text":"%pyspark\n\n#---------------筛选私家车、出租车---------------------需组合Spyder代码\ndf_vihecle_type = df_charging.join(df_home, on=['deviceid'], how='inner')\ndf_vihecle_type = df_vihecle_type.withColumn('lg_round', df_vihecle_type.lg_round.cast(DoubleType()))\\\n                                 .withColumn('lat_round', df_vihecle_type.lat_round.cast(DoubleType()))\n\nimport numpy as np\n@pandas_udf(\"double\", PandasUDFType.SCALAR)\ndef lon_lat_distance(lon1, lat1, lon2, lat2):\n    #定义地球半径\n    R = 6371\n    \n    #把角度转换成弧度\n    radlon1 = (lon1*3.14159265)/180.0\n    radlat1 = (lat1*3.14159265)/180.0\n    radlon2 = (lon2*3.14159265)/180.0\n    radlat2 = (lat2*3.14159265)/180.0\n    \n    return np.arccos(np.cos(radlat1) * np.cos(radlat2) * np.cos(radlon1-radlon2) + np.sin(radlat1) * np.sin(radlat2)) * R\n\n# 充电位置与家距离\ndf_vihecle_type = df_vihecle_type.withColumn('charging_home_distance', lon_lat_distance('lg_round', 'lat_round', 'home_lg', 'home_lat'))\ndf_vihecle_type = df_vihecle_type.withColumn('charging_home_distance', df_vihecle_type.charging_home_distance.cast(DecimalType(10,3)))\ndf_vihecle_type = df_vihecle_type.withColumn('charging_home_distance', df_vihecle_type.charging_home_distance.cast(DoubleType()))\n\n# 充电位置与家距离中位数\n@pandas_udf(\"deviceid string, charging_home_distance double, charging_home_distance_50 double\", PandasUDFType.GROUPED_MAP)\ndef cal_50quantile(df_x):\n    return df_x.assign(charging_home_distance_50 = df_x.charging_home_distance.quantile(0.50))\ndf_50quantile = df_vihecle_type.select('deviceid', 'charging_home_distance').groupby('deviceid').apply(cal_50quantile)\ndf_50quantile = df_50quantile.withColumn('charging_home_distance_50', df_50quantile.charging_home_distance_50.cast(DecimalType(10,3)))\ndf_50quantile = df_50quantile.withColumn('charging_home_distance_50', df_50quantile.charging_home_distance_50.cast(DoubleType()))\\\n                             .drop('charging_home_distance')\ndf_50quantile = df_50quantile.distinct()\ndf_vihecle_type = df_vihecle_type.join(df_50quantile, on=['deviceid'], how='inner')\n\n# 充电位置与家75分位数\n@pandas_udf(\"deviceid string, charging_home_distance double, charging_home_distance_75 double\", PandasUDFType.GROUPED_MAP)\ndef cal_75quantile(df_x):\n    return df_x.assign(charging_home_distance_75 = df_x.charging_home_distance.quantile(0.75))\ndf_75quantile = df_vihecle_type.select('deviceid', 'charging_home_distance').groupby('deviceid').apply(cal_75quantile)\ndf_75quantile = df_75quantile.withColumn('charging_home_distance_75', df_75quantile.charging_home_distance_75.cast(DecimalType(10,3)))\ndf_75quantile = df_75quantile.withColumn('charging_home_distance_75', df_75quantile.charging_home_distance_75.cast(DoubleType()))\\\n                             .drop('charging_home_distance')\ndf_75quantile = df_75quantile.distinct()\ndf_vihecle_type = df_vihecle_type.join(df_75quantile, on=['deviceid'], how='inner')\n\n# 充电位置与家距离标准差\nw9 = Window.partitionBy('deviceid')\ndf_vihecle_type = df_vihecle_type.withColumn('charging_home_distance_std', f.stddev('charging_home_distance').over(w9))\ndf_vihecle_type = df_vihecle_type.withColumn('charging_home_distance_std', df_vihecle_type.charging_home_distance_std.cast(DecimalType(10,4)))\ndf_vihecle_type = df_vihecle_type.withColumn('charging_home_distance_std', df_vihecle_type.charging_home_distance_std.cast(DoubleType()))\ndf_vihecle_type = df_vihecle_type.fillna(0.0, subset=['charging_home_distance_std'])\ndf_vihecle_type = df_vihecle_type.select('deviceid', 'charging_id', 'lg_round', 'lat_round', 'home_lg', 'home_lat', 'charging_home_distance', 'charging_home_distance_50', 'charging_home_distance_75', 'charging_home_distance_std')\ndf_vihecle_type.show()\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536807_-26807738","id":"20210112-185502_984333968","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1563"},{"text":"%pyspark\n\n# 第一次筛选\ndf_vihecle_type = df_vihecle_type.withColumn('vihecle_type', f.when(df_vihecle_type.charging_home_distance_50 + df_vihecle_type.charging_home_distance_std<=0.0641, 1).otherwise(0))\ndf_vihecle_type = df_vihecle_type.withColumn('distance_less_75', f.when(df_vihecle_type.charging_home_distance<df_vihecle_type.charging_home_distance_75, 1).otherwise(0))\nprint '私家车数量：', df_vihecle_type.filter(df_vihecle_type.vihecle_type==1).select('deviceid').distinct().count()\ndf_vihecle_type = df_vihecle_type.repartition(1)\n# df_vihecle_type.write.csv('/tmp/dbh_vihecle_type', mode='overwrite', header=True)\ndf_vihecle_type.show()\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536808_123377639","id":"20210112-180639_860502185","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1564"},{"text":"%pyspark\n\n# 剩余车辆中再次筛选私家车\ndf_left = df_vihecle_type.filter((df_vihecle_type.vihecle_type==0) & (df_vihecle_type.distance_less_75==1))\ndf_left = df_left.select('deviceid', 'charging_home_distance')\nprint 'df_left_count:', df_left.count()\n\n# 充电位置与家距离中位数\n@pandas_udf(\"deviceid string, charging_home_distance double, charging_home_distance_50 double\", PandasUDFType.GROUPED_MAP)\ndef cal_50quantile(df_x):\n    return df_x.assign(charging_home_distance_50 = df_x.charging_home_distance.quantile(0.50))\ndf_50quantile = df_left.select('deviceid', 'charging_home_distance').groupby('deviceid').apply(cal_50quantile)\ndf_50quantile = df_50quantile.withColumn('charging_home_distance_50', df_50quantile.charging_home_distance_50.cast(DecimalType(10,3)))\ndf_50quantile = df_50quantile.withColumn('charging_home_distance_50', df_50quantile.charging_home_distance_50.cast(DoubleType()))\\\n                             .drop('charging_home_distance')\ndf_50quantile = df_50quantile.distinct()\ndf_left = df_left.join(df_50quantile, on=['deviceid'], how='inner')\n\n# 充电位置与家距离标准差\nw9 = Window.partitionBy('deviceid')\ndf_left = df_left.withColumn('charging_home_distance_std', f.stddev('charging_home_distance').over(w9))\ndf_left = df_left.withColumn('charging_home_distance_std', df_left.charging_home_distance_std.cast(DecimalType(10,4)))\ndf_left = df_left.withColumn('charging_home_distance_std', df_left.charging_home_distance_std.cast(DoubleType()))\ndf_left = df_left.fillna(0.0, subset=['charging_home_distance_std'])\n\ndf_left = df_left.withColumn('vihecle_type', f.when(df_left.charging_home_distance_50 + df_left.charging_home_distance_std<=0.0641, 1).otherwise(0))\ndf_left = df_left.filter(df_left.vihecle_type==1).select('deviceid', 'vihecle_type').distinct()\ndf_left = df_left.withColumnRenamed('vihecle_type', 'vihecle_type_2')\nprint '筛选到私家车数量：', df_left.count()\ndf_left.show()\n\ndf_vihecle_type = df_vihecle_type.join(df_left, on=['deviceid'], how='left')\ndf_vihecle_type = df_vihecle_type.fillna(0, ['vihecle_type_2'])\ndf_vihecle_type = df_vihecle_type.withColumn('vihecle_type_3', df_vihecle_type.vihecle_type + df_vihecle_type.vihecle_type_2)\nprint '私家车总数量：', df_vihecle_type.filter(df_vihecle_type.vihecle_type_3==1).select('deviceid').distinct().count()\n\ndf_vihecle_type = df_vihecle_type.select('deviceid', 'vihecle_type_3').distinct()\ndf_vihecle_type = df_vihecle_type.withColumnRenamed('vihecle_type_3', 'vihecle_type')\ndf_vihecle_type.show()\n\n# 写入hdfs\ndf_vihecle_type = df_vihecle_type.repartition(1)\ndf_vihecle_type.write.csv('/tmp/dbh_vihecle_type_' + str(year) + '-' + str(month), mode='overwrite', header=True)\n","user":"admin","dateUpdated":"2021-01-28T14:44:35+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536808_1576229968","id":"20210112-180640_1529073412","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1565"},{"text":"%pyspark\n\n# -----------------------私家车通勤特征-------------------------\n# 选择私家车\ndf_vihecle_type = pd.read_csv(\"/opt/app/outdata/dbh_vihecle_type_final.csv\")\nprivate_car = df_vihecle_type[df_vihecle_type['vihecle_type']==1]['deviceid'].tolist()\nprint private_car[:5]\n\n# 选择私家车的驾驶行为数据\ndf_private = df_driving_behavior.filter(df_driving_behavior.deviceid.isin(private_car)).select('deviceid', 'trip_id', 'start_time', 'stop_time', 'trip_duration', 'trip_distance', 'start_lg', 'start_lat', 'stop_lg', 'stop_lat', 'avg_speed', 'stop_times', 'delta_soc', 'nasty_times')\nprint 'driving behavior total count: ', df_driving_behavior.count()\nprint 'private cat driving behavior count: ', df_private.count()\n\n# 匹配家gps\ndf_private = df_private.join(df_home, on=['deviceid'], how='left')\ndf_private = df_private.withColumn('start_lg', df_private.start_lg.cast(DecimalType(7,3)))\\\n                       .withColumn('start_lat', df_private.start_lat.cast(DecimalType(7,3)))\\\n                       .withColumn('stop_lg', df_private.stop_lg.cast(DecimalType(7,3)))\\\n                       .withColumn('stop_lat', df_private.stop_lat.cast(DecimalType(7,3)))\ndf_private.show()\n\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536808_280351760","id":"20210112-180641_1890451620","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1566"},{"text":"%pyspark\n\n# 筛选从家出发的行程\ndf_1 = df_private.filter((df_private.start_lg==df_private.home_lg) & (df_private.start_lat==df_private.home_lat))\n\n# 筛选距离大于3公里的行程\ndf_1 = df_1.filter(df_1.trip_distance>=3)\n\n# 求公司gps\ndf_1 = df_1.withColumn('stop_lg', df_1.stop_lg.cast(DoubleType()))\\\n           .withColumn('stop_lat', df_1.stop_lat.cast(DoubleType()))\n\n@pandas_udf(\"deviceid string, stop_lg double, company_lg double\", PandasUDFType.GROUPED_MAP)\ndef get_lg_mode(df_x):\n    return df_x.assign(company_lg = df_x.stop_lg.mode()[0])\ndf_lg_mode = df_1.select('deviceid', 'stop_lg').groupby('deviceid').apply(get_lg_mode)\ndf_lg_mode = df_lg_mode.drop('stop_lg').dropDuplicates(subset=['deviceid', 'company_lg'])\n\n@pandas_udf(\"deviceid string, stop_lat double, company_lat double\", PandasUDFType.GROUPED_MAP)\ndef get_lat_mode(df_x):\n    return df_x.assign(company_lat = df_x.stop_lat.mode()[0])\ndf_lat_mode = df_1.select('deviceid', 'stop_lat').groupby('deviceid').apply(get_lat_mode)\ndf_lat_mode = df_lat_mode.drop('stop_lat').dropDuplicates(subset=['deviceid', 'company_lat'])\n\ndf_company = df_lg_mode.join(df_lat_mode, on=['deviceid'], how='inner')\ndf_company.show()\n\n# 匹配公司gps\ndf_1 = df_1.join(df_company, on=['deviceid'], how='inner')\n\n# 计算行程停止gps与公司gps之间的距离，小于0.5公里的聚类为公司gps\nimport numpy as np\n@pandas_udf(\"double\", PandasUDFType.SCALAR)\ndef lon_lat_distance(lon1, lat1, lon2, lat2):\n    #定义地球半径\n    R = 6371\n    \n    #把角度转换成弧度\n    radlon1 = (lon1*3.14159265)/180.0\n    radlat1 = (lat1*3.14159265)/180.0\n    radlon2 = (lon2*3.14159265)/180.0\n    radlat2 = (lat2*3.14159265)/180.0\n    \n    return np.arccos(np.cos(radlat1) * np.cos(radlat2) * np.cos(radlon1-radlon2) + np.sin(radlat1) * np.sin(radlat2)) * R\n\ndf_1 = df_1.withColumn('stop_company_distance', lon_lat_distance('stop_lg', 'stop_lat', 'company_lg', 'company_lat'))\ndf_1 = df_1.fillna({'stop_company_distance':0.0})\n\n# 筛选出去公司的行程\ndf_1 = df_1.filter(df_1.stop_company_distance<=0.5)\ndf_1.show()\n\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536808_-2073251148","id":"20210112-180641_468755347","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1567"},{"text":"%pyspark\n\n# 统计去公司每月次数\nw9 = Window.partitionBy('deviceid')\ndf_2 = df_1.withColumn('to_company_times', f.count('trip_id').over(w9))\n# df_2.select('deviceid', 'trip_id', 'start_time', 'stop_time', 'trip_duration', 'trip_distance', 'stop_lg', 'stop_lat', 'company_lg', 'company_lat', 'stop_company_distance', 'to_company_times').show(300)\n\n# 筛选出每月去公司超过10次的车辆\ndf_2 = df_2.filter(df_2.to_company_times>=10)\ndf_2 = df_2.orderBy(['deviceid', 'trip_id'], ascending=[1,1])\ndf_2.select('deviceid', 'trip_id', 'start_time', 'stop_time', 'trip_duration', 'trip_distance', 'stop_lg', 'stop_lat', 'company_lg', 'company_lat', 'stop_company_distance', 'to_company_times').show(300)\n\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536808_2042871492","id":"20210112-180642_956413413","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1568"},{"text":"%pyspark\n\n# 聚类通勤时间区间\ndf_2 = df_2.withColumn('start_time', f.to_timestamp('start_time', format=\"yyyy-MM-dd HH:mm:ss\"))\ndf_2 = df_2.withColumn('start_hour', f.hour('start_time'))\\\n           .withColumn('start_minute', f.minute('start_time'))\ndf_2 = df_2.withColumn('start_minute', f.when(df_2.start_minute>30, 30).otherwise(0))\ndf_2 = df_2.withColumn('end_minute', f.when(df_2.start_minute==0, 29).otherwise(59))\n#df_2.select('start_time', 'start_hour', 'start_minute', 'end_minute').show()\n\ndf_2 = df_2.withColumn('start_hour', df_2.start_hour.cast(StringType()))\\\n           .withColumn('start_minute', df_2.start_minute.cast(StringType()))\\\n           .withColumn('end_minute', df_2.end_minute.cast(StringType()))\n           \ndf_2 = df_2.withColumn('start_range_1', f.when(f.length(df_2.start_minute)==1, f.concat_ws(\":0\", df_2.start_hour, df_2.start_minute)).otherwise(f.concat_ws(\":\", df_2.start_hour, df_2.start_minute)))\n#df_2.select('start_time', 'start_hour', 'start_minute', 'end_minute', 'start_range_1').show()\n\ndf_2 = df_2.withColumn('start_range_2', f.concat_ws(\":\", df_2.start_hour, df_2.end_minute))\n\ndf_2 = df_2.withColumn('start_range', f.concat_ws(\"-\", df_2.start_range_1, df_2.start_range_2))\ndf_2.select('start_time', 'start_hour', 'start_minute', 'end_minute', 'start_range_1', 'start_range_2', 'start_range').show(100)\n\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536808_-1934628619","id":"20210112-180642_1236690775","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1569"},{"text":"%pyspark\n\n# 通勤时间段\ndf_2 = df_2.withColumn('start_hour', df_2.start_hour.cast(IntegerType()))\ndf_2 = df_2.withColumn('day_period', f.when(df_2.start_hour<12, 'Morning').when(((df_2.start_hour>=12) & (df_2.start_hour<18)), 'Afternoon').otherwise('Evening'))\ndf_2 = df_2.withColumn('trip_duration', df_2.trip_duration.cast(DecimalType(4,1)).cast(DoubleType()))\\\n           .withColumn('avg_speed', df_2.avg_speed.cast(DecimalType(4,1)).cast(DoubleType()))\n           \ndf_2.select('start_time', 'start_hour', 'start_minute', 'end_minute', 'start_range_1', 'start_range_2', 'start_range', 'day_period').show(100)\n\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536808_1111742223","id":"20210112-180643_129415604","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1570"},{"text":"%pyspark\n\n# 通勤特征：平均时长、平均距离、平均速度、平均耗电量\nw10 = Window.partitionBy(['deviceid', 'day_period'])\ndf_3 = df_2.withColumn('commuting_avg_duration', f.mean('trip_duration').over(w10))\\\n           .withColumn('commuting_avg_distance', f.mean('trip_distance').over(w10))\\\n           .withColumn('commuting_avg_speed', f.mean('avg_speed').over(w10))\\\n           .withColumn('commuting_avg_delta_soc', f.mean('delta_soc').over(w10))\n\ndf_3 = df_3.withColumn('commuting_avg_duration', df_3.commuting_avg_duration.cast(DecimalType(5,1)).cast(DoubleType()))\\\n           .withColumn('commuting_avg_distance', df_3.commuting_avg_distance.cast(DecimalType(5,1)).cast(DoubleType()))\\\n           .withColumn('commuting_avg_speed', df_3.commuting_avg_speed.cast(DecimalType(5,1)).cast(DoubleType()))\\\n           .withColumn('commuting_avg_delta_soc', df_3.commuting_avg_delta_soc.cast(DecimalType(5,1)).cast(DoubleType()))\n\ndf_3.select('deviceid', 'day_period', 'start_range', 'trip_duration', 'delta_soc', 'trip_distance', 'avg_speed', 'stop_times', 'nasty_times', 'commuting_avg_duration', 'commuting_avg_distance', 'commuting_avg_speed', 'commuting_avg_delta_soc').show(100)\n\n# 通勤特征写入hdfs\ndf_3 = df_3.repartition(1)\ndf_3.write.csv('/tmp/dbh_commuting_feature_' + str(year) + '-' + str(month), mode='overwrite', header=True)\n\n","user":"admin","dateUpdated":"2021-01-28T14:44:47+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536808_1503094942","id":"20210112-180643_1521284141","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1571"},{"text":"%pyspark\n\n# 通勤时间推荐：时间最短，行驶最顺畅\ndf_4 = df_3.withColumn('smooth', df_3.stop_times + df_3.nasty_times)\ndf_4 = df_4.select('deviceid', 'day_period', 'start_range', 'trip_duration', 'smooth')\n\nw11 = Window.partitionBy(['deviceid', 'day_period', 'start_range'])\ndf_4 = df_4.withColumn('range_avg_duration', f.mean('trip_duration').over(w11).cast(DecimalType(4,1)).cast(DoubleType()))\\\n           .withColumn('range_avg_smooth', f.mean('smooth').over(w11).cast(DecimalType(4,1)).cast(DoubleType()))\n\n# minimum_duration_advice, smoothest advice\ndf_4 = df_4.drop('trip_duration', 'smooth').distinct()\ndf_4 = df_4.orderBy(['deviceid', 'day_period', 'start_range'], ascending=[1,1,1])\n\nw12 = Window.partitionBy(['deviceid', 'day_period'])\ndf_4 = df_4.withColumn('minimum_duration', f.min('range_avg_duration').over(w12))\\\n           .withColumn('smoothest', f.min('range_avg_smooth').over(w12))\ndf_4.show(100)\n\ndf_minimum_duration_advice = df_4.filter(df_4.range_avg_duration==df_4.minimum_duration)\ndf_minimum_duration_advice= df_minimum_duration_advice.drop('range_avg_duration', 'range_avg_smooth', 'smoothest')\ndf_minimum_duration_advice = df_minimum_duration_advice.withColumnRenamed('start_range', 'minimum_duration_advice')\ndf_minimum_duration_advice.show(100)\n\ndf_smoothest_advice = df_4.filter(df_4.range_avg_smooth==df_4.smoothest)\ndf_smoothest_advice = df_smoothest_advice.drop('range_avg_duration', 'range_avg_smooth', 'minimum_duration')\\\n                                         .withColumnRenamed('start_range', 'smoothest_advice')\ndf_smoothest_advice.show(100)\n\ndf_commuting_advice = df_minimum_duration_advice.join(df_smoothest_advice, on=['deviceid', 'day_period'], how='full')\ndf_commuting_advice.show(100)\n\n# 写入hdfs\ndf_commuting_advice.repartition(1).write.csv('/tmp/dbh_commuting_advice_' + str(year) + '-' + str(month), mode='overwrite', header=True)\n\n\n","user":"admin","dateUpdated":"2021-01-28T14:41:42+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536808_-416075751","id":"20210112-180643_1169487831","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1572"},{"text":"%pyspark\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536809_1492435270","id":"20210112-180637_1648890370","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1573"},{"text":"%pyspark\n","user":"admin","dateUpdated":"2021-01-25T17:22:16+0800","config":{"editorSetting":{"language":"python","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/python","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1611566536809_-1817737721","id":"20201111-120736_1836137493","dateCreated":"2021-01-25T17:22:16+0800","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:1574"}],"name":"dbh_11","id":"2FXFWQBV3","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}